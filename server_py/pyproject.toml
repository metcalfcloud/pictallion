[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pictallion-backend"
version = "1.0.0"
description = "Python backend for Pictallion photo management application"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pictallion Team", email = "contact@pictallion.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Graphics :: Viewers",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "pydantic==2.5.0",
    "sqlmodel==0.0.14",
    "sqlalchemy[asyncio]==2.0.23",
    "alembic==1.13.1",
    "aiosqlite==0.19.0",
    "asyncpg==0.29.0",
    "tensorflow==2.15.0",
    "face-recognition==1.3.0",
    "dlib==19.24.2",
    "mediapipe==0.10.8",
    "openai==1.3.7",
    "Pillow==10.1.0",
    "piexif==1.1.3",
    "opencv-python==4.8.1.78",
    "aiofiles==23.2.1",
    "python-multipart==0.0.6",
    "python-dotenv==1.0.0",
    "pydantic-settings==2.1.0",
    "httpx==0.25.2",
    "nanoid==2.0.0",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "slowapi==0.1.9",
]

[project.optional-dependencies]
desktop = ["PyQt6==6.6.1"]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "black==23.11.0",
    "ruff==0.1.6",
    "mypy==1.7.1",
    "pre-commit==3.5.0",
]

[project.scripts]
pictallion = "app.main:main"
pictallion-server = "app.main:run_server"

[project.urls]
Homepage = "https://github.com/pictallion/pictallion"
Repository = "https://github.com/pictallion/pictallion.git"
Issues = "https://github.com/pictallion/pictallion/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "face_recognition.*",
    "dlib.*",
    "cv2.*",
    "tensorflow.*",
    "mediapipe.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]