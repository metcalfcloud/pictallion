{
  "project": {
    "name": "Pictallion",
    "type": "Full-stack photo management application",
    "architecture": "Client-server with AI processing pipeline"
  },
  "directories": {
    "client/": {
      "role": "React frontend application",
      "expectedFileTypes": [".tsx", ".ts", ".css", ".html"],
      "allowedImports": ["client/src/*", "shared/*"],
      "required": ["index.html"],
      "conventions": ["React 18+ components", "TypeScript strict mode"]
    },
    "client/src/components/": {
      "role": "Reusable UI components",
      "expectedFileTypes": [".tsx"],
      "allowedImports": [
        "client/src/hooks",
        "client/src/lib",
        "client/src/contexts",
        "shared/*"
      ],
      "conventions": [
        "PascalCase naming",
        "Export default component",
        "Props interface defined"
      ]
    },
    "client/src/components/ui/": {
      "role": "Base UI component library (Shadcn/ui)",
      "expectedFileTypes": [".tsx"],
      "allowedImports": ["@radix-ui/*", "client/src/lib/utils"],
      "conventions": [
        "Lower kebab-case file names",
        "Radix UI based",
        "Styled with Tailwind"
      ]
    },
    "client/src/pages/": {
      "role": "Page-level route components",
      "expectedFileTypes": [".tsx"],
      "allowedImports": [
        "client/src/components",
        "client/src/hooks",
        "client/src/lib",
        "shared/*"
      ],
      "conventions": ["kebab-case file names", "Default export page component"]
    },
    "client/src/hooks/": {
      "role": "Custom React hooks",
      "expectedFileTypes": [".ts", ".tsx"],
      "allowedImports": ["client/src/lib", "shared/*"],
      "conventions": ["use-kebab-case.ts naming", "Export named hook functions"]
    },
    "client/src/lib/": {
      "role": "Client-side utilities and configurations",
      "expectedFileTypes": [".ts"],
      "allowedImports": ["shared/*"],
      "conventions": ["Pure functions", "No React dependencies"]
    },
    "client/src/contexts/": {
      "role": "React context providers",
      "expectedFileTypes": [".tsx"],
      "allowedImports": ["client/src/hooks", "client/src/lib"],
      "conventions": [
        "kebab-case-context.tsx naming",
        "Provider and hook exports"
      ]
    },
    "server/": {
      "role": "Express.js backend API server",
      "expectedFileTypes": [".ts", ".js"],
      "allowedImports": ["server/*", "shared/*"],
      "required": ["index.ts"],
      "conventions": ["Node.js ESM modules", "TypeScript strict mode"]
    },
    "server/routes/": {
      "role": "API route handlers",
      "expectedFileTypes": [".ts"],
      "allowedImports": ["server/services", "server/utils", "shared/*"],
      "conventions": ["Export Express router", "RESTful endpoints"]
    },
    "server/services/": {
      "role": "Business logic and AI processing services",
      "expectedFileTypes": [".ts"],
      "allowedImports": ["server/utils", "shared/*"],
      "conventions": [
        "Service classes or exported functions",
        "Async operations"
      ]
    },
    "server/utils/": {
      "role": "Server-side utilities",
      "expectedFileTypes": [".ts"],
      "allowedImports": ["shared/*"],
      "conventions": ["Pure utility functions", "No database dependencies"]
    },
    "server/migrations/": {
      "role": "Database migration scripts",
      "expectedFileTypes": [".sql"],
      "allowedImports": [],
      "conventions": ["SQL DDL statements", "Descriptive file names"]
    },
    "shared/": {
      "role": "Code shared between client and server",
      "expectedFileTypes": [".ts"],
      "allowedImports": [],
      "required": ["schema.ts", "types.ts"],
      "conventions": ["No runtime dependencies", "Type definitions only"]
    },
    "scripts/": {
      "role": "Build, deployment, and utility scripts",
      "expectedFileTypes": [".sh", ".js", ".ts"],
      "allowedImports": [],
      "conventions": ["Executable permissions", "Error handling with set -e"]
    },
    "scripts/ci/": {
      "role": "CI/CD pipeline scripts",
      "expectedFileTypes": [".sh"],
      "allowedImports": [],
      "conventions": ["GitHub Actions compatible", "Platform detection"]
    },
    "electron/": {
      "role": "Electron desktop application wrapper",
      "expectedFileTypes": [".js"],
      "allowedImports": ["electron"],
      "conventions": ["CommonJS modules", "Main process entry point"]
    },
    "data/": {
      "role": "Application data storage",
      "expectedFileTypes": ["images", "videos", "metadata"],
      "subdirectories": ["media/silver", "media/gold", "media/archive"],
      "conventions": ["Tiered storage structure", "Date-based organization"]
    },
    "uploads/": {
      "role": "Temporary file upload staging",
      "expectedFileTypes": ["any"],
      "subdirectories": ["temp"],
      "conventions": ["Temporary storage only", "Auto-cleanup"]
    },
    "assets/": {
      "role": "Static application assets",
      "expectedFileTypes": [".png", ".ico", ".icns"],
      "conventions": ["Application icons", "Platform-specific formats"]
    },
    "docs/": {
      "role": "Documentation and screenshots",
      "expectedFileTypes": [".md", ".png"],
      "conventions": ["README structure", "Screenshot naming"]
    },
    ".github/": {
      "role": "GitHub-specific configurations",
      "expectedFileTypes": [".yml", ".md"],
      "subdirectories": ["workflows", "ISSUE_TEMPLATE"],
      "conventions": ["GitHub Actions YAML", "Issue templates"]
    },
    "test-photos/": {
      "role": "Test dataset for development",
      "expectedFileTypes": ["images"],
      "conventions": ["Development only", "Not in production builds"]
    }
  },
  "rules": [
    "All TypeScript files must use strict mode",
    "Client code cannot import server code directly",
    "Shared code must be framework-agnostic",
    "AI services must handle provider failures gracefully",
    "Database operations must use Drizzle ORM",
    "UI components should follow Shadcn/ui patterns",
    "API routes must include error handling",
    "File uploads must go through validation",
    "No hardcoded localhost URLs (use 0.0.0.0)",
    "Environment variables for sensitive configuration"
  ],
  "conventions": {
    "naming": {
      "components": "PascalCase",
      "files": "kebab-case",
      "directories": "kebab-case or camelCase",
      "variables": "camelCase",
      "constants": "UPPER_SNAKE_CASE"
    },
    "imports": {
      "order": ["external", "internal", "relative"],
      "aliases": {
        "@/": "client/src/",
        "~/": "shared/"
      }
    },
    "exports": {
      "components": "default export",
      "utilities": "named exports",
      "types": "named exports"
    }
  },
  "issues": [
    {
      "severity": "medium",
      "type": "structure",
      "description": "Large uploads/temp directory may cause storage issues",
      "locations": ["uploads/temp/"],
      "recommendation": "Implement automatic cleanup strategy"
    },
    {
      "severity": "medium",
      "type": "testing",
      "description": "No test files found in codebase",
      "locations": ["entire project"],
      "recommendation": "Add test files alongside components and services"
    },
    {
      "severity": "low",
      "type": "documentation",
      "description": "Missing screenshots in docs directory",
      "locations": ["docs/"],
      "recommendation": "Add required screenshots as documented in docs/README.md"
    },
    {
      "severity": "medium",
      "type": "dependency",
      "description": "Heavy AI/ML dependencies in client bundle",
      "locations": ["client/", "package.json"],
      "recommendation": "Move AI processing to server-side only"
    },
    {
      "severity": "low",
      "type": "structure",
      "description": "Mixed file extensions in scripts directory",
      "locations": ["scripts/"],
      "recommendation": "Consider separating shell scripts from Node.js scripts"
    },
    {
      "severity": "medium",
      "type": "performance",
      "description": "No lazy loading for page components",
      "locations": ["client/src/pages/"],
      "recommendation": "Implement React.lazy for code splitting"
    }
  ],
  "dependencies": {
    "frontend": {
      "framework": "React 18",
      "routing": "Wouter",
      "state": "TanStack Query",
      "ui": "Shadcn/ui + Tailwind CSS",
      "forms": "React Hook Form"
    },
    "backend": {
      "framework": "Express.js",
      "database": "PostgreSQL + Drizzle ORM",
      "ai": "Ollama + OpenAI fallback",
      "fileHandling": "Multer",
      "imageProcessing": "Sharp"
    },
    "build": {
      "bundler": "Vite",
      "serverBuild": "esbuild",
      "desktop": "Electron Builder"
    }
  },
  "buildTargets": {
    "development": "npm run dev",
    "production": "npm run build && npm start",
    "desktop": "npm run electron:build",
    "docker": "scripts/build-docker.sh"
  }
}
