name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install RPM build tools (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y rpm

      - name: Install dmg-license (macOS only)
        if: matrix.os == 'macos-latest'
        run: npm install dmg-license --save-dev

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            # Handle macOS ARM64 rollup binary issues
            rm -rf node_modules package-lock.json
            npm install --no-package-lock
          else
            npm ci
          fi

      - name: Run unit/integration tests
        run: npm test

      - name: Build Electron app
        run: |
          npm run build
          npx electron-builder --${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'mac' || 'win' }}

      - name: Archive installers
        run: |
          mkdir -p dist/installers
          cp dist/*.dmg dist/installers/ || true
          cp dist/*.exe dist/installers/ || true
          cp dist/*.AppImage dist/installers/ || true

      # The following steps are only run on Linux for Docker builds and publishing
      - name: Build Docker image (SQLite)
        if: matrix.os == 'ubuntu-latest'
        run: docker build -f docker/Dockerfile.sqlite -t pictallion:sqlite .

      - name: Start Docker container (SQLite)
        if: matrix.os == 'ubuntu-latest'
        run: docker run -d --name pictallion_sqlite_test -p 8080:8080 pictallion:sqlite

      - name: Health check Docker container (SQLite)
        if: matrix.os == 'ubuntu-latest'
        run: |
          for i in {1..10}; do
            if docker inspect --format='{{.State.Health.Status}}' pictallion_sqlite_test 2>/dev/null | grep -q healthy; then
              echo "Container healthy"
              exit 0
            fi
            sleep 3
          done
          echo "Container health check failed"
          docker logs pictallion_sqlite_test
          exit 1

      - name: Stop Docker container (SQLite)
        if: matrix.os == 'ubuntu-latest'
        run: docker rm -f pictallion_sqlite_test

      - name: Build Docker image (External DB)
        if: matrix.os == 'ubuntu-latest'
        run: docker build -f docker/Dockerfile.external -t pictallion:external .

      - name: Log in to Docker Hub
        if: matrix.os == 'ubuntu-latest'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image (SQLite)
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker tag pictallion:sqlite ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:sqlite-${{ github.ref_name }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:sqlite-${{ github.ref_name }}

      - name: Push Docker image (External DB)
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker tag pictallion:external ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:external-${{ github.ref_name }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:external-${{ github.ref_name }}

      - name: Publish installers to GitHub Releases
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/installers/*
