name: 🚀 Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pictallion_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: ✅ Type check
        run: npm run check

      - name: 🔍 Security audit
        run: bash ./scripts/ci/security-audit.sh

      - name: 🔍 Database setup
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pictallion_test

  build:
    name: 📦 Build Packages
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: bash ./scripts/ci/install-deps.sh
        shell: bash

      - name: 🏗️ Build application
        run: bash ./scripts/ci/build-app.sh
        shell: bash

      - name: 📋 Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        shell: bash

      - name: 📦 Create platform archive
        run: bash ./scripts/ci/create-platform-archive.sh
        shell: bash

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pictallion-${{ matrix.os }}
          path: pictallion-${{ steps.version.outputs.VERSION }}-*

  docker:
    name: 🐳 Build Docker Images
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: 🚀 Build Docker setup
        run: bash ./scripts/ci/docker-setup.sh

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: 🎉 Create Release
    needs: [test, build, docker]
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📋 Get version and changelog
        id: version
        run: bash ./scripts/ci/get-version-changelog.sh

      - name: 📁 Organize release assets
        run: bash ./scripts/ci/organize-release-assets.sh

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Pictallion ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          files: release_assets/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'rc') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}