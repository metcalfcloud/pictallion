name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v0.0.1'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: AppImage
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: deb
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: rpm
          - os: macos-13
            platform: mac
            arch: x64
            ext: dmg
          - os: macos-14-arm64
            platform: mac
            arch: arm64
            ext: dmg
          - os: windows-latest
            platform: win
            arch: x64
            ext: exe
          - os: windows-latest
            platform: win
            arch: x64
            ext: msi

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            rpm \
            fakeroot \
            dpkg \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm2 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libxss1 \
            libasound2-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install necessary dependencies for macOS builds
          npm install --global create-dmg || true

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows-specific npm configuration
            npm config set fetch-retry-mintimeout 20000
            npm config set fetch-retry-maxtimeout 120000
            npm config set fetch-timeout 300000
            npm install --no-audit --prefer-offline || npm install --no-audit
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Handle macOS Silicon compatibility
            export npm_config_target_arch=${{ matrix.arch }}
            export npm_config_target_platform=darwin
            export npm_config_cache=/tmp/.npm
            npm ci --no-audit
          else
            npm ci --no-audit
          fi

      - name: Build application
        shell: bash
        run: |
          echo "Building application for ${{ matrix.platform }}-${{ matrix.arch }}"
          npm run build

      - name: Prepare Electron build
        shell: bash
        run: |
          # Ensure dist directory exists with built assets
          if [[ ! -d "dist/public" || ! -f "dist/index.js" ]]; then
            echo "Build output missing. Contents of dist:"
            ls -la dist/ || echo "No dist directory"
            exit 1
          fi

          # Verify Electron main entry point
          if [[ ! -f "electron/main.js" ]]; then
            echo "Electron main.js not found"
            exit 1
          fi

      - name: Build Electron application
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [[ "${{ matrix.platform }}" == "mac" ]]; then
            # macOS specific build
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              npx electron-builder --mac --arm64 --config.mac.target.arch=arm64
            else
              npx electron-builder --mac --x64 --config.mac.target.arch=x64
            fi
          elif [[ "${{ matrix.platform }}" == "win" ]]; then
            # Windows specific build
            if [[ "${{ matrix.ext }}" == "msi" ]]; then
              npx electron-builder --win --config.win.target=msi
            else
              npx electron-builder --win --config.win.target=nsis
            fi
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            # Linux specific build
            if [[ "${{ matrix.ext }}" == "AppImage" ]]; then
              npx electron-builder --linux AppImage
            elif [[ "${{ matrix.ext }}" == "deb" ]]; then
              npx electron-builder --linux deb
            elif [[ "${{ matrix.ext }}" == "rpm" ]]; then
              npx electron-builder --linux rpm
            fi
          fi

      - name: List build artifacts
        shell: bash
        run: |
          echo "Build artifacts:"
          find dist -name "*.dmg" -o -name "*.exe" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | sort

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.ext }}
          path: |
            dist/*.dmg
            dist/*.exe
            dist/*.msi  
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          retention-days: 30

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci --no-audit
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate Docker configuration
        run: |
          chmod +x scripts/build-docker.sh
          ./scripts/build-docker.sh

      - name: Build and push Docker images
        run: |
          # Build SQLite version
          docker build -f docker/Dockerfile.sqlite -t pictallion:sqlite .
          docker tag pictallion:sqlite ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:sqlite-${{ github.ref_name }}
          docker tag pictallion:sqlite ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:sqlite-latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:sqlite-${{ github.ref_name }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:sqlite-latest

          # Build external DB version
          docker build -f docker/Dockerfile.external -t pictallion:external .
          docker tag pictallion:external ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:external-${{ github.ref_name }}
          docker tag pictallion:external ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:external-latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:external-${{ github.ref_name }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:external-latest

  release:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize release assets
        run: |
          mkdir -p release-assets

          # Copy all built binaries to release directory
          find artifacts -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} release-assets/ \;

          # List what we're releasing
          echo "Release assets:"
          ls -la release-assets/

      - name: Generate release notes
        run: |
          echo "# Pictallion ${{ github.ref_name }}" > release-notes.md
          echo "" >> release-notes.md
          echo "## Desktop Applications" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Windows" >> release-notes.md
          echo "- \`Pictallion-Setup-*.exe\` - Windows installer (recommended)" >> release-notes.md
          echo "- \`Pictallion-*.msi\` - Windows MSI package" >> release-notes.md
          echo "" >> release-notes.md
          echo "### macOS" >> release-notes.md
          echo "- \`Pictallion-*-x64.dmg\` - Intel Mac" >> release-notes.md
          echo "- \`Pictallion-*-arm64.dmg\` - Apple Silicon Mac" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Linux" >> release-notes.md
          echo "- \`Pictallion-*.AppImage\` - Universal Linux (recommended)" >> release-notes.md
          echo "- \`pictallion_*.deb\` - Debian/Ubuntu package" >> release-notes.md
          echo "- \`pictallion-*.rpm\` - Red Hat/Fedora package" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Docker Images" >> release-notes.md
          echo "" >> release-notes.md
          echo "- \`pictallion:sqlite-${{ github.ref_name }}\` - Self-contained with SQLite" >> release-notes.md
          echo "- \`pictallion:external-${{ github.ref_name }}\` - For external PostgreSQL" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Features in this release" >> release-notes.md
          echo "- Professional photo management with AI-powered metadata" >> release-notes.md
          echo "- Neural network face detection and recognition" >> release-notes.md
          echo "- Advanced search and filtering capabilities" >> release-notes.md
          echo "- Collections and album management" >> release-notes.md
          echo "- Batch photo operations" >> release-notes.md
          echo "- Cross-platform desktop and web deployment" >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          body_path: release-notes.md
          tag_name: ${{ github.ref_name }}
          name: Pictallion ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: false