name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v0.0.1'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: AppImage
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: deb
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: rpm
          - os: macos-latest
            platform: mac
            arch: x64
            ext: dmg
          - os: macos-latest
            platform: mac
            arch: arm64
            ext: dmg
          - os: windows-latest
            platform: win
            arch: x64
            ext: exe
          - os: windows-latest
            platform: win
            arch: x64
            ext: msi

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            rpm \
            fakeroot \
            dpkg

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # macOS dependencies are handled by Tauri
          echo "macOS dependencies handled by Tauri"

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci --no-audit

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          projectPath: src-tauri/src-tauri
          args: --verbose

      - name: List build artifacts
        shell: bash
        run: |
          echo "Build artifacts:"
          find src-tauri/src-tauri/target/release/bundle -name "*.dmg" -o -name "*.exe" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | sort

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.ext }}
          path: |
            src-tauri/src-tauri/target/release/bundle/**/*.dmg
            src-tauri/src-tauri/target/release/bundle/**/*.exe
            src-tauri/src-tauri/target/release/bundle/**/*.msi
            src-tauri/src-tauri/target/release/bundle/**/*.AppImage
            src-tauri/src-tauri/target/release/bundle/**/*.deb
            src-tauri/src-tauri/target/release/bundle/**/*.rpm
          retention-days: 30

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          # Build web frontend image
          docker build -f docker/Dockerfile -t pictallion:web .
          docker tag pictallion:web ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:web-${{ github.ref_name }}
          docker tag pictallion:web ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:web-latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:web-${{ github.ref_name }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pictallion:web-latest

  release:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize release assets
        run: |
          mkdir -p release-assets

          # Copy all built binaries to release directory
          find artifacts -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} release-assets/ \;

          # List what we're releasing
          echo "Release assets:"
          ls -la release-assets/

      - name: Generate release notes
        run: |
          echo "# Pictallion ${{ github.ref_name }}" > release-notes.md
          echo "" >> release-notes.md
          echo "## Desktop Applications" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Windows" >> release-notes.md
          echo "- \`Pictallion-Setup-*.exe\` - Windows installer (recommended)" >> release-notes.md
          echo "- \`Pictallion-*.msi\` - Windows MSI package" >> release-notes.md
          echo "" >> release-notes.md
          echo "### macOS" >> release-notes.md
          echo "- \`Pictallion-*-x64.dmg\` - Intel Mac" >> release-notes.md
          echo "- \`Pictallion-*-arm64.dmg\` - Apple Silicon Mac" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Linux" >> release-notes.md
          echo "- \`Pictallion-*.AppImage\` - Universal Linux (recommended)" >> release-notes.md
          echo "- \`pictallion_*.deb\` - Debian/Ubuntu package" >> release-notes.md
          echo "- \`pictallion-*.rpm\` - Red Hat/Fedora package" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Docker Images" >> release-notes.md
          echo "" >> release-notes.md
          echo "- \`pictallion:web-${{ github.ref_name }}\` - Web frontend deployment" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Features in this release" >> release-notes.md
          echo "- Professional photo management with AI-powered metadata" >> release-notes.md
          echo "- Neural network face detection and recognition" >> release-notes.md
          echo "- Advanced search and filtering capabilities" >> release-notes.md
          echo "- Collections and album management" >> release-notes.md
          echo "- Batch photo operations" >> release-notes.md
          echo "- Cross-platform desktop and web deployment" >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          body_path: release-notes.md
          tag_name: ${{ github.ref_name }}
          name: Pictallion ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: false
