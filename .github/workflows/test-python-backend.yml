name: Python Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server_py/**'
      - '.github/workflows/test-python-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'server_py/**'
      - '.github/workflows/test-python-backend.yml'

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: 'sqlite:///./test.db'
  TEST_DATABASE_URL: 'sqlite:///./test.db'
  ENVIRONMENT: 'test'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('server_py/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: server_py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install flake8 black isort mypy
    
    - name: Lint with flake8
      working-directory: server_py
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      working-directory: server_py
      run: black --check --diff .
    
    - name: Check import sorting with isort
      working-directory: server_py
      run: isort --check-only --diff .
    
    - name: Type check with mypy
      working-directory: server_py
      run: mypy app/ --ignore-missing-imports

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('server_py/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: server_py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run unit tests
      working-directory: server_py
      run: |
        pytest tests/test_database_comprehensive.py tests/test_services_comprehensive.py \
          -v --tb=short --strict-markers \
          --cov=app --cov-report=xml --cov-report=term-missing \
          --cov-fail-under=85 \
          --durations=10
    
    - name: Upload unit test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: server_py/coverage.xml
        flags: unit-tests
        name: unit-tests-${{ matrix.python-version }}

  api-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('server_py/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: server_py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run API tests
      working-directory: server_py
      run: |
        pytest tests/test_api_routes_comprehensive.py \
          -v --tb=short --strict-markers \
          --cov=app/api --cov-report=xml --cov-report=term-missing \
          --cov-fail-under=80 \
          --durations=10
    
    - name: Upload API test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: server_py/coverage.xml
        flags: api-tests
        name: api-tests

  integration-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pictallion_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('server_py/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: server_py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install psycopg2-binary
    
    - name: Run integration tests with PostgreSQL
      working-directory: server_py
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pictallion_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pictallion_test
      run: |
        pytest tests/test_integration_workflows.py \
          -v --tb=short --strict-markers \
          --cov=app --cov-report=xml --cov-report=term-missing \
          --durations=10 \
          --timeout=300
    
    - name: Upload integration test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: server_py/coverage.xml
        flags: integration-tests
        name: integration-tests

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('server_py/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: server_py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run performance tests
      working-directory: server_py
      run: |
        pytest tests/test_performance_load.py \
          -v --tb=short --strict-markers \
          -m "performance and not load" \
          --durations=10 \
          --timeout=600
    
    - name: Run load tests (limited)
      working-directory: server_py
      run: |
        pytest tests/test_performance_load.py \
          -v --tb=short --strict-markers \
          -m "load" \
          --durations=10 \
          --timeout=900
      continue-on-error: true  # Don't fail CI if load tests fail

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: server_py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run safety check for known vulnerabilities
      working-directory: server_py
      run: safety check --json || true
    
    - name: Run bandit security scan
      working-directory: server_py
      run: bandit -r app/ -f json || true

  test-coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('server_py/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: server_py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run all tests with coverage
      working-directory: server_py
      run: |
        pytest \
          tests/test_database_comprehensive.py \
          tests/test_services_comprehensive.py \
          tests/test_api_routes_comprehensive.py \
          tests/test_integration_workflows.py \
          -v --tb=short --strict-markers \
          --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing \
          --cov-fail-under=90 \
          --durations=20
    
    - name: Upload comprehensive coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: server_py/coverage.xml
        flags: comprehensive
        name: comprehensive-coverage
    
    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: server_py/htmlcov/
        retention-days: 30

  build-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: server_py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build
    
    - name: Test application startup
      working-directory: server_py
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            from app.main import app
            print('✓ Application imports successfully')
        except Exception as e:
            print(f'✗ Application import failed: {e}')
            sys.exit(1)
        "
    
    - name: Check for missing dependencies
      working-directory: server_py
      run: |
        python -c "
        import pkg_resources
        import sys
        
        try:
            with open('requirements.txt', 'r') as f:
                requirements = [line.strip() for line in f if line.strip() and not line.startswith('#')]
            
            for requirement in requirements:
                try:
                    pkg_resources.require(requirement)
                    print(f'✓ {requirement}')
                except pkg_resources.DistributionNotFound:
                    print(f'✗ Missing: {requirement}')
                    sys.exit(1)
                except pkg_resources.VersionConflict as e:
                    print(f'⚠ Version conflict: {e}')
        except Exception as e:
            print(f'Error checking dependencies: {e}')
            sys.exit(1)
        
        print('✓ All dependencies satisfied')
        "

  notify-results:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, api-tests, integration-tests, security-scan, test-coverage-report, build-check]
    if: always()
    
    steps:
    - name: Notify test results
      run: |
        echo "Test Results Summary:"
        echo "- Lint: ${{ needs.lint.result }}"
        echo "- Unit Tests: ${{ needs.unit-tests.result }}"
        echo "- API Tests: ${{ needs.api-tests.result }}"
        echo "- Integration Tests: ${{ needs.integration-tests.result }}"
        echo "- Security Scan: ${{ needs.security-scan.result }}"
        echo "- Coverage Report: ${{ needs.test-coverage-report.result }}"
        echo "- Build Check: ${{ needs.build-check.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" == "failure" || 
              "${{ needs.api-tests.result }}" == "failure" || 
              "${{ needs.integration-tests.result }}" == "failure" || 
              "${{ needs.test-coverage-report.result }}" == "failure" ]]; then
          echo "❌ Critical tests failed"
          exit 1
        else
          echo "✅ All critical tests passed"
        fi