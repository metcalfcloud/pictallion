name: üîÑ CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pictallion_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci

      - name: üé® Lint code
        run: |
          # Add linting when available
          echo "Linting step - add ESLint/Prettier when configured"

      - name: üèóÔ∏è Build client
        run: cd client && npm run build

      - name: ‚úÖ Type check
        run: npm run check

      - name: üîç Database setup
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pictallion_test

      - name: üß™ Run tests
        run: |
          # Add test runner when tests are available
          echo "Test step - add Jest/Vitest when configured"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pictallion_test

  build:
    name: üèóÔ∏è Build Check
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build application
        run: |
          chmod +x scripts/package.sh
          ./scripts/package.sh

      - name: üì¶ Test Docker build
        run: |
          chmod +x scripts/build-docker.sh
          ./scripts/build-docker.sh
          docker build -t pictallion:test .

  security:
    name: üîí Basic Security Check
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci

      - name: üîç Run security audit
        run: |
          # Run audit and capture output
          npm audit --audit-level=high --json > audit-results.json || true
          
          # Check for high or critical vulnerabilities only
          HIGH_CRITICAL=$(cat audit-results.json | jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | .key' | wc -l)
          
          if [ "$HIGH_CRITICAL" -gt "0" ]; then
            echo "‚ùå Found high or critical vulnerabilities:"
            cat audit-results.json | jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | "\(.key): \(.value.severity)"'
            exit 1
          else
            echo "‚úÖ No high or critical vulnerabilities found"
            # Show total vulnerability count but don't fail
            TOTAL=$(cat audit-results.json | jq -r '.vulnerabilities | length')
            if [ "$TOTAL" -gt "0" ]; then
              echo "‚ÑπÔ∏è Found $TOTAL total vulnerabilities (see weekly security report for details)"
            fi
          fi