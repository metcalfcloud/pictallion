name: üîÑ CI/CD

on:
  push:
    branches: [main, develop]
    tags-ignore:
      - 'v*.*.*'
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pictallion_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üö¶ Check line endings
        run: |
          chmod +x scripts/ci/check-line-endings.sh
          scripts/ci/check-line-endings.sh

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: üîß Install frontend dependencies
        run: |
          cd frontend
          npm ci --no-audit --no-fund

      - name: üé® Lint code (frontend)
        run: |
          cd frontend
          npx eslint . --max-warnings=0
          npx prettier --check .

      - name: üèóÔ∏è Build client
        run: cd frontend && VITE_TAURI_STUB=1 npm run build

      # Type checking happens during build in frontend script

      # Install Playwright browsers for e2e
      - name: üé≠ Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: üß™ Run client unit tests (Vitest)
        run: |
          cd frontend
          npm run test
      - name: Upload client coverage to Codecov
        if: env.ACT != 'true'
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: tauri-frontend
          name: tauri-frontend-coverage

      - name: üé≠ Run E2E tests (Playwright)
        run: |
          cd frontend
          # Use root config to start dev server and run root tests
          npx playwright test -c ../playwright.config.ts --reporter=line

      - name: ü¶Ä Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: üíæ Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: üèóÔ∏è Build Rust/Tauri backend
        run: |
          cd src-tauri/src-tauri
          cargo build --release

      - name:  Run Rust unit tests
        run: |
          cd src-tauri/src-tauri
          cargo test --all --release

      - name: üß™ Run server tests (placeholder)
        run: |
          echo "Server tests are managed in test-python-backend.yml"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pictallion_test

  build:
    name: üèóÔ∏è Build Check
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: üîß Install frontend dependencies
        run: |
          cd frontend
          npm ci --no-audit --no-fund

      - name: üèóÔ∏è Build application
        run: |
          chmod +x scripts/ci/package.sh
          ./scripts/ci/package.sh

      - name: üì¶ Test Docker build
        run: |
          docker build -f docker/Dockerfile -t pictallion:test .

      - name: üîç Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@v0.13.1
        with:
          image-ref: pictallion:test
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'

  security:
    name: üîí Basic Security Check
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: üîß Install dependencies (frontend)
        run: |
          cd frontend
          npm ci

      - name: üîç Run security audit (npm)
        run: |
          cd frontend
          # Run audit and capture output
          npm audit --audit-level=high --json > audit-results.json || true

          # Check for high or critical vulnerabilities only
          HIGH_CRITICAL=$(cat audit-results.json | jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | .key' | wc -l)

          if [ "$HIGH_CRITICAL" -gt "0" ]; then
            echo "‚ùå Found high or critical vulnerabilities:"
            cat audit-results.json | jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | "\(.key): \(.value.severity)"'
            exit 1
          else
            echo "‚úÖ No high or critical vulnerabilities found"
            # Show total vulnerability count but don't fail
            TOTAL=$(cat audit-results.json | jq -r '.vulnerabilities | length')
            if [ "$TOTAL" -gt "0" ]; then
              echo "‚ÑπÔ∏è Found $TOTAL total vulnerabilities (see weekly security report for details)"
            fi
          fi
